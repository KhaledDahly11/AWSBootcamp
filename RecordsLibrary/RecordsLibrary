#! /bin/bash

#-------------------------OptionsNumber--------------------------
OptionsNumber() {
local optionsnumber=$(( $(echo $@ | wc -c)/2 ))
echo $optionsnumber
}
#---------------------------Options------------------------------
Options() {
local option=0
read -p "Please enter your option: " option
while [ $option -gt $1 ] || [ $option -le 0 ]
do
	echo "Invalid option, please choose from the menu above"
	read -p "Please enter option within the range (1-$1): "
done
echo $option
}


#-------------------------PrintHelpers---------------------------
#------------------------AllFilePrinter--------------------------
AllFilePrinter() {
if [ "$1" = "N" ]
then
	cat $file
else
	cat $file | sort
fi
}
#---------------------SpecificLinesPrinter-----------------------
SpecificLinesPrinter() {
local MenuType="$1"
shift 1
local optionnum=1
for i in "$@"
do
	if [ "$MenuType" = "M" ]
	then
		echo -n "$optionnum)"
		sed -n ${i}p $file | awk -F ',' '{print $1}'
        else
                echo -n "$optionnum)"
		sed -n -e ${i}p $file
	fi
	let  optionnum+=1
done
}
#----------------------------Print-------------------------------
Print() {
if [ $1 = "N" ]
then
	AllFilePrinter $1
elif [ $1 = "S" ]
then
	AllFilePrinter $1
elif [ $1 = "M" ]
then
	SpecificLinesPrinter $@
else
	SpecificLinesPrinter $@
fi
}
#-----------------------FindRowNumbers---------------------------
FindRowNumbers() {
local linesnum=$(grep -n "$1" $file | awk -F ':' '{print $1}' | awk '{printf (" %s",$0)}')
echo $linesnum
}
#---------------------DeleteRecfromLib---------------------------
DeleteRecordfromLib() {
wholeline=$@
sed -i "/$wholeline/d" $file
}
#----------------------AddRecordtoLib----------------------------
AddRecordtoLib() {
echo "$@" >> $file
echo "$@ Added to library"
}
#----------------------ExtractName---------------------------
ExtractName() {
local name
for i in $( eval echo {1..$#})
do
        if [ $i -eq $# ]
        then
		name+=$( echo ${!#} | awk -F ',' '{print $1}')
        else
                name+=${!i}
                name+=' '
        fi
done
echo $name
}
#----------------------ExtractCopies---------------------------
ExtractCopies() {
local copies=$( echo $@ | awk -F ',' '{print $2}')
echo $copies
}
#----------------------RecNameValidity---------------------------
RecNameValidity() {
local name=($(ExtractName "$@"))
local copies=$(ExtractCopies "$@")
local valid="Valid"
for i in ${name[@]}
do
	if [[ ! $i =~ ^[a-zA-Z]*[0-9]*[\s]*$ ]]
	then
		valid="NotValid"
	fi
done
if [[ ! $copies =~ ^[0-9]+$ ]]
then
	valid="NotValid"
fi
echo $valid
}
#--------------------ExternalFileValidity-------------------------
ExternalFileValidity() {
if [ ! -f "$2" ] || [ ! -w "$2" ]
then
	echo "$1 file is not found or not writable. please make sure its created and write permitted"
	exit
fi
}
#-------------------CheckOriginalOption--------------------------
CheckOriginalOption() {
local origoption="Y"
local Rows=($(FindRowNumbers $@))
for i in ${Rows[@]}
do
	local existingname=$(sed -n ${i}p $file | awk -F ',' '{print $1}')
	if [ $( echo $@ ${existingname[@]} | tr ' ' '\n' | sort | uniq -u | wc -l) -eq 0 ]
	then
		origoption="N"
	fi
done
echo $origoption
}
#----------------------PrintorDelOrig----------------------------
PrintorDelOriginal() {
local AorD=$1
local optionnumber=$2
shift 2
if [ "$AorD" = "A" ]
then
	echo "$optionnumber)$@"
else
	echo "$optionnumber)Delete All?"
fi
}
#---------------------PrintandOptions----------------------------
PrintandOptions() {
local AddorUpdate=$1
shift 1
local recordname=$(ExtractName $@)
local copies=$(ExtractCopies $@)
local Rows=($(FindRowNumbers $recordname))
local optionsnumber=$(OptionsNumber ${Rows[@]})
local origoption=$(CheckOriginalOption $recordname)
local origoptionnum=$(( $optionsnumber+1 ))
option=0
if [ "$AddorUpdate" = "A" ]
then
	if [ "$origoption" = "N" ] && [ $optionsnumber -eq "1" ]
	then
		local existingcopies=$(sed -n ${Rows}p $file | awk -F ',' '{print $2}')
                copies=$(( $copies + $existingcopies ))
                UpdateRecord "$recordname,$existingcopies" $copies
	else
		Print M ${Rows[@]}
		if [ "$origoption" = "Y" ]
        	then
                	PrintorDelOriginal A $origoptionnum $recordname
                	optionsnumber=$origoptionnum
        	fi
                option=$(Options $optionsnumber)
	fi
else
	if [ $optionsnumber -eq "1" ] && [ "$origoption" = "N" ]
	then
		local existingcopies=$(sed -n ${Rows}p $file | awk -F ',' '{print $2}')
        	if [ "$AddorUpdate" = "D" ]
	        then
        	copies=$(( 0-$copies ))
                copies=$(( $copies+$existingcopies ))
		fi
                UpdateRecord "$recordname,$existingcopies" $copies
	else
        Print M ${Rows[@]}
	local option=$(Options $optionsnumber)
	fi
fi
if [ $option -eq $origoptionnum ] && [ "$AddorUpdate" = "A" ] && [ "$origoption" = "Y" ]
then
        AddRecordtoLib $@
elif [ $option -ne "0" ]
then
        local rowindex=$( echo ${Rows[$(( $option-1 ))]} )
        local choice=$(sed -n ${rowindex}p $file | awk -F ',' '{print $1}')
        local existingcopies=$(sed -n ${rowindex}p $file | awk -F ',' '{print $2}')
        if [ "$AddorUpdate" = "D" ]
        then
               copies=$(( 0 - $copies ))
               copies=$(( $copies + $(sed -n ${rowindex}p $file | awk -F ',' '{print $2}') ))
        elif [ "$AddorUpdate" = "A" ]
        then
               copies=$(( $copies+$existingcopies ))
        fi
        UpdateRecord "$choice,$existingcopies" $copies
fi
}
#----------------------CheckRecStatus----------------------------
CheckRecStatus() {
local AddorUpdate=$1
shift 1
local recordname=$(ExtractName $@)
local copies=$(ExtractCopies $@)
local Rows=($(FindRowNumbers $recordname))
local status
if [ -z $Rows ]
then
	if [ "$AddorUpdate" = "A" ]
	then
		AddRecordtoLib $@
	else
		echo "Wrong name cannot complete your request, please make sure you're inserting the right name."
		status="Failure"
	fi
else
	PrintandOptions $AddorUpdate $@
fi
}
#-----------------------UpdateRecord-----------------------------
UpdateRecord() {
local recordname=$(ExtractName $1)
local existingcopies=$(ExtractCopies $1)
if [ $2 -lt "0" ]
then
	echo "There is no enough copies in the library to complete your request, sorry."
	status="Failure"
elif [ $2 -eq "0" ]
then
	DeleteRecordfromLib $1
	echo "Record Deleted."
else
	local old="$recordname,$existingcopies"
	local new="$recordname,$2"
	sed -i "s/$old/$new/g" $file
	echo "The new number of copies of the $recordname record is $2."
fi
}
#---------------------UpdateRecordName----------------------------
UpdateRecordName() {
local old
local new
read -p "Please enter the record's name you want to rename: " old
local namevalidity=$(RecNameValidity $line)
if [ "$namevalidity" = "NotValid" ]
then
        echo "Record's name or copies is not valid. please make sure you're entering a legal name and copies."
	status="Failure"
else
	local Rows=($(FindRowNumbers $old))
	local optionsnumber=$(OptionsNumber ${Rows[@]})
	if [ $optionsnumber -gt 1 ] || [ $(CheckOriginalOption $old) = "Y" ]
	then
	        Print M ${Rows[@]}
	        local option=$(Options $optionsnumber)
	        local rowindex=$( echo ${Rows[$(( $option-1 ))]} )
	        old=$(sed -n ${rowindex}p $file | awk -F ',' '{print $1}')
	elif [ -z $Rows ]
	then
	        echo "There is not such file in the library, please make sure you're inserting the right name (or part of it)"
		status="Failure"
	else
		read -p "Please enter the record's new name: " new
		sed -i "s/$old/$new/g" $file
		echo "The new name of $old record is $new."
	fi
fi
}
#-------------------------AddRecord------------------------------
AddRecord() {
local line
read -p "Please enter a record name and copies in this format Name,Copies: " line
local namevalidity=$(RecNameValidity $line)
if [ "$namevalidity" = "NotValid" ]
then
        echo "Record's name or copies is not valid. please make sure you're entering a legal name and copies."
	status="Failure"
else
	CheckRecStatus A $line
fi
}
#---------------------DeleteRecfromLib---------------------------
DeleteRecord() {
local line
read -p "Please enter a record name and copies in this format Name,Copies: " line
local namevalidity=$(RecNameValidity $line)
if [ "$namevalidity" = "NotValid" ]
then
        echo "Record's name or copies is not valid. please make sure you're entering a legal name and copies."
	status="Failure"
else
	echo -e "Please wait deleting...\nHere is the search results\n"
	CheckRecStatus D $line
fi
}
#------------------------UpdateRecord-----------------------------
UpdateRecordCopies() {
local line
read -p "Please enter a record name and copies in this format Name,Copies: " line
local namevalidity=$(RecNameValidity $line)
if [ "$namevalidity" = "NotValid" ]
then
        echo "Record's name or copies is not valid. please make sure you're entering a legal name and copies."
	status="Failure"
else
	echo -e "Please wait while updating...\nHere is the update results\n"
	CheckRecStatus U $line
fi
}
#-----------------------SearchRecord-----------------------------
Search() {
local line
read -p "Please enter a record name: " line
echo -e "Please wait while searching...\nHere is the search results\n"
local Rows=($(FindRowNumbers $line))
if [ -z $Rows ]
then
	echo "There is no records in the library which matches your search"
else
	Print MA ${Rows[@]}
fi
}
#----------------------NumberOfRecords---------------------------
NumOfRecords() {
echo -n "The total number of records in the library is: "
cat $file | wc -l
}
#-----------------------SortedLibrary----------------------------
SortedLibrary() {
cat $file | sort
}
#---------------------------Logfile------------------------------
Logfile() {
echo "-----------------------------------------------------------"
local option
now=$(date)
case $1 in
                1)
                        option="Insert";;
                2 | delete)
                        option="Delete";;
                3 | search)
                        option="Search";;
                4 | "update name")
                        option="UpdateName";;
                5 | "update copies")
                        option="UpdateAmount";;
                6 | "print records num")
                        option="PrintAmount";;
                7 | "print sorted")
                        option="PrintAll";;
		8 )
			exit;;
                esac
echo -e "$now $option $2" >> $logfile
echo "Going back to main menu"
echo -e "-----------------------------------------------------------\nWhat would you like to do next?"
}
#--------------------------MainMenu------------------------------
MainMenu() {
	echo -e "-----------------------------------------------------------\nWelcome to the record library\nWhat would like to do?"
        while [ 0 ]
        do
		status="Success"
                echo -e "1)Add record to library\n2)Delete record from library\n3)Search for record (by name)\n4)Update record name\n5)Update record copies\n6)Print records number in the library\n7)Print sorted records in the library\n8)Exit\n\n"
                read -p "Please insert the action number: " option
                echo "-----------------------------------------------------------"
                case $option in
                1 | add)
                        AddRecord;;
                2 | delete)
                        DeleteRecord;;
                3 | search)
                        Search;;
                4 | "update name")
                        UpdateRecordName;;
                5 | "update copies")
			UpdateRecordCopies;;
                6 | "print records num")
			NumOfRecords;;
                7 | "print sorted")
                        SortedLibrary;;
                8 | exit )
                        echo "It was nice having you here and thank you for visting our records library:)";;
                *)
                        echo "Invalid option"
                        ;;
                esac
	Logfile $option $status
	done
}
#--------------------------------------------------------------

file="$1"
logfile="$2"
ExternalFileValidity RecordsLibrary $file
ExternalFileValidity Log $logfile
echo > $logfile
MainMenu

